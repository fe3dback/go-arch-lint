// Code generated by MockGen. DO NOT EDIT.
// Source: interfaces.go
//
// Generated by this command:
//
//	mockgen -source=interfaces.go -destination=mocks/mocks.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	models "github.com/fe3dback/go-arch-lint/v4/internal/models"
	gomock "go.uber.org/mock/gomock"
)

// MockasciiColorizer is a mock of asciiColorizer interface.
type MockasciiColorizer struct {
	ctrl     *gomock.Controller
	recorder *MockasciiColorizerMockRecorder
}

// MockasciiColorizerMockRecorder is the mock recorder for MockasciiColorizer.
type MockasciiColorizerMockRecorder struct {
	mock *MockasciiColorizer
}

// NewMockasciiColorizer creates a new mock instance.
func NewMockasciiColorizer(ctrl *gomock.Controller) *MockasciiColorizer {
	mock := &MockasciiColorizer{ctrl: ctrl}
	mock.recorder = &MockasciiColorizerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockasciiColorizer) EXPECT() *MockasciiColorizerMockRecorder {
	return m.recorder
}

// Colorize mocks base method.
func (m *MockasciiColorizer) Colorize(color models.ColorName, text string) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Colorize", color, text)
	ret0, _ := ret[0].(string)
	return ret0
}

// Colorize indicates an expected call of Colorize.
func (mr *MockasciiColorizerMockRecorder) Colorize(color, text any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Colorize", reflect.TypeOf((*MockasciiColorizer)(nil).Colorize), color, text)
}
