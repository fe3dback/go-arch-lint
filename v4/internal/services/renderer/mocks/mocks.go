// Code generated by MockGen. DO NOT EDIT.
// Source: interfaces.go
//
// Generated by this command:
//
//	mockgen -source=interfaces.go -destination=mocks/mocks.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MocktypeRenderer is a mock of typeRenderer interface.
type MocktypeRenderer struct {
	ctrl     *gomock.Controller
	recorder *MocktypeRendererMockRecorder
}

// MocktypeRendererMockRecorder is the mock recorder for MocktypeRenderer.
type MocktypeRendererMockRecorder struct {
	mock *MocktypeRenderer
}

// NewMocktypeRenderer creates a new mock instance.
func NewMocktypeRenderer(ctrl *gomock.Controller) *MocktypeRenderer {
	mock := &MocktypeRenderer{ctrl: ctrl}
	mock.recorder = &MocktypeRendererMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MocktypeRenderer) EXPECT() *MocktypeRendererMockRecorder {
	return m.recorder
}

// Render mocks base method.
func (m *MocktypeRenderer) Render(model any) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Render", model)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Render indicates an expected call of Render.
func (mr *MocktypeRendererMockRecorder) Render(model any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Render", reflect.TypeOf((*MocktypeRenderer)(nil).Render), model)
}
