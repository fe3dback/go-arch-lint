models.Config{
 SyntaxProblems: models.RefSlice[string]{
  {
   Value: "[5:1] unexpected directive value. document not started",
   Ref: models.Reference{
    File: "/conf.yml",
    Line: 5,
    Column: 1,
    XPath: "",
    Valid: true,
   },
  },
 },
 Version: models.Ref[internal/models.ConfigVersion]{
  Value: 0,
  Ref: models.Reference{
   File: "",
   Line: 0,
   Column: 0,
   XPath: "",
   Valid: false,
  },
 },
 WorkingDirectory: models.Ref[internal/models.PathRelative]{
  Value: "",
  Ref: models.Reference{
   File: "",
   Line: 0,
   Column: 0,
   XPath: "",
   Valid: false,
  },
 },
 Settings: models.ConfigSettings{
  DeepScan: models.Ref[bool]{
   Value: false,
   Ref: models.Reference{
    File: "",
    Line: 0,
    Column: 0,
    XPath: "",
    Valid: false,
   },
  },
  Imports: models.ConfigSettingsImports{
   StrictMode: models.Ref[bool]{
    Value: false,
    Ref: models.Reference{
     File: "",
     Line: 0,
     Column: 0,
     XPath: "",
     Valid: false,
    },
   },
   AllowAnyVendorImports: models.Ref[bool]{
    Value: false,
    Ref: models.Reference{
     File: "",
     Line: 0,
     Column: 0,
     XPath: "",
     Valid: false,
    },
   },
  },
  Tags: models.ConfigSettingsTags{
   Allowed: models.Ref[internal/models.ConfigSettingsTagsEnum]{
    Value: "",
    Ref: models.Reference{
     File: "",
     Line: 0,
     Column: 0,
     XPath: "",
     Valid: false,
    },
   },
   AllowedList: models.RefSlice[internal/models.StructTag](nil),
  },
 },
 Exclude: models.ConfigExclude{
  RelativeDirectories: models.RefSlice[internal/models.PathRelative](nil),
  RelativeFiles: models.RefSlice[internal/models.PathRelativeRegExp](nil),
 },
 Components: models.ConfigComponents{
  Map: models.RefMap[internal/models.ComponentName,internal/models.ConfigComponent]{
   values: map[models.ComponentName]models.ConfigComponent(nil),
   refs: map[models.ComponentName]models.Reference(nil),
  },
 },
 Vendors: models.ConfigVendors{
  Map: models.RefMap[internal/models.VendorName,internal/models.ConfigVendor]{
   values: map[models.VendorName]models.ConfigVendor(nil),
   refs: map[models.VendorName]models.Reference(nil),
  },
 },
 CommonComponents: models.RefSlice[internal/models.ComponentName](nil),
 CommonVendors: models.RefSlice[internal/models.VendorName](nil),
 Dependencies: models.ConfigDependencies{
  Map: models.RefMap[internal/models.ComponentName,internal/models.ConfigComponentDependencies]{
   values: map[models.ComponentName]models.ConfigComponentDependencies(nil),
   refs: map[models.ComponentName]models.Reference(nil),
  },
 },
}
