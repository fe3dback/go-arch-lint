// Code generated by MockGen. DO NOT EDIT.
// Source: interfaces.go
//
// Generated by this command:
//
//	mockgen -source=interfaces.go -destination=mocks/mocks.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// Mockcolorizer is a mock of colorizer interface.
type Mockcolorizer struct {
	ctrl     *gomock.Controller
	recorder *MockcolorizerMockRecorder
}

// MockcolorizerMockRecorder is the mock recorder for Mockcolorizer.
type MockcolorizerMockRecorder struct {
	mock *Mockcolorizer
}

// NewMockcolorizer creates a new mock instance.
func NewMockcolorizer(ctrl *gomock.Controller) *Mockcolorizer {
	mock := &Mockcolorizer{ctrl: ctrl}
	mock.recorder = &MockcolorizerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *Mockcolorizer) EXPECT() *MockcolorizerMockRecorder {
	return m.recorder
}

// Blue mocks base method.
func (m *Mockcolorizer) Blue(in string) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Blue", in)
	ret0, _ := ret[0].(string)
	return ret0
}

// Blue indicates an expected call of Blue.
func (mr *MockcolorizerMockRecorder) Blue(in any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Blue", reflect.TypeOf((*Mockcolorizer)(nil).Blue), in)
}

// Cyan mocks base method.
func (m *Mockcolorizer) Cyan(in string) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Cyan", in)
	ret0, _ := ret[0].(string)
	return ret0
}

// Cyan indicates an expected call of Cyan.
func (mr *MockcolorizerMockRecorder) Cyan(in any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Cyan", reflect.TypeOf((*Mockcolorizer)(nil).Cyan), in)
}

// Gray mocks base method.
func (m *Mockcolorizer) Gray(in string) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Gray", in)
	ret0, _ := ret[0].(string)
	return ret0
}

// Gray indicates an expected call of Gray.
func (mr *MockcolorizerMockRecorder) Gray(in any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Gray", reflect.TypeOf((*Mockcolorizer)(nil).Gray), in)
}

// Green mocks base method.
func (m *Mockcolorizer) Green(in string) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Green", in)
	ret0, _ := ret[0].(string)
	return ret0
}

// Green indicates an expected call of Green.
func (mr *MockcolorizerMockRecorder) Green(in any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Green", reflect.TypeOf((*Mockcolorizer)(nil).Green), in)
}

// Magenta mocks base method.
func (m *Mockcolorizer) Magenta(in string) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Magenta", in)
	ret0, _ := ret[0].(string)
	return ret0
}

// Magenta indicates an expected call of Magenta.
func (mr *MockcolorizerMockRecorder) Magenta(in any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Magenta", reflect.TypeOf((*Mockcolorizer)(nil).Magenta), in)
}

// Red mocks base method.
func (m *Mockcolorizer) Red(in string) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Red", in)
	ret0, _ := ret[0].(string)
	return ret0
}

// Red indicates an expected call of Red.
func (mr *MockcolorizerMockRecorder) Red(in any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Red", reflect.TypeOf((*Mockcolorizer)(nil).Red), in)
}

// Yellow mocks base method.
func (m *Mockcolorizer) Yellow(in string) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Yellow", in)
	ret0, _ := ret[0].(string)
	return ret0
}

// Yellow indicates an expected call of Yellow.
func (mr *MockcolorizerMockRecorder) Yellow(in any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Yellow", reflect.TypeOf((*Mockcolorizer)(nil).Yellow), in)
}
